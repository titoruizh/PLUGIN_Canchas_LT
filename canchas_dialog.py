# -*- coding: utf-8 -*-
import os
from qgis.PyQt import QtWidgets, QtCore
from qgis.PyQt.QtCore import pyqtSignal, QThread, QSettings, QTime
from qgis.PyQt.QtWidgets import (QDialog, QTabWidget, QVBoxLayout, QHBoxLayout, 
                                QPushButton, QTextEdit, QProgressBar, QLabel, 
                                QLineEdit, QFileDialog)

class CanchasDialog(QDialog):
    """Di√°logo principal del plugin con pesta√±as reorganizado"""
    
    def __init__(self):
        super(CanchasDialog, self).__init__()
        self.setupUi()
        self.init_connections()
        self.load_settings()
        
    def setupUi(self):
        """Crear la interfaz con pesta√±as reorganizada (1-2-3-4)"""
        self.setWindowTitle("Canchas Las Tortolas - Procesador Topogr√°fico")
        self.setMinimumSize(800, 600)
        
        # Layout principal
        layout = QVBoxLayout()
        
        # Crear widget de pesta√±as principales (solo 3)
        self.tab_widget = QTabWidget()
        
        # Crear las pesta√±as principales
        self.create_validation_tab()      # Pesta√±a 1
        self.create_processing_tab()      # Pesta√±a 2
        self.create_analysis_tab()        # Pesta√±a 3 (con sub-pesta√±as)
        self.create_reports_tab()         # Pesta√±a 4 (Datos Reporte)
        
        layout.addWidget(self.tab_widget)
        
        # Barra de progreso global
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        layout.addWidget(self.progress_bar)
        
        # Log de resultados
        self.log_text = QTextEdit()
        self.log_text.setMaximumHeight(150)
        self.log_text.setPlaceholderText("Los resultados de las operaciones aparecer√°n aqu√≠...")
        layout.addWidget(self.log_text)
        
        # Botones finales
        button_layout = QHBoxLayout()
        self.btn_close = QPushButton("Cerrar")
        button_layout.addStretch()
        button_layout.addWidget(self.btn_close)
        layout.addLayout(button_layout)
        
        self.setLayout(layout)
    
    def create_validation_tab(self):
        """Pesta√±a 1: Validaci√≥n (SIN CAMBIOS)"""
        tab = QtWidgets.QWidget()
        layout = QVBoxLayout()
        
        # T√≠tulo y descripci√≥n con estilo
        title = QLabel("üìã VALIDACI√ìN DE ARCHIVOS")
        title.setStyleSheet("font-weight: bold; font-size: 14px; color: #F18F01;")
        layout.addWidget(title)
        
        desc = QLabel("Valida archivos CSV/ASC espacialmente y los prepara para procesamiento")
        desc.setStyleSheet("color: gray; margin-bottom: 10px;")
        layout.addWidget(desc)
        
        # Grupo de carpeta principal
        main_group = QtWidgets.QGroupBox("üìÅ CARPETA PRINCIPAL DE TRABAJO")
        main_layout = QVBoxLayout()
        
        # PROC_ROOT con estilo
        proc_layout = QHBoxLayout()
        proc_layout.addWidget(QLabel("Carpeta Procesamiento (PROC_ROOT):"))
        self.proc_root = QLineEdit()
        self.proc_root.setPlaceholderText("E:\\CANCHAS_QFIELD\\QGIS PROCESAMIENTO\\Archivos Procesados TERRENO")
        self.proc_root.setText(r"E:\CANCHAS_QFIELD\QGIS PROCESAMIENTO\Archivos Procesados TERRENO")
        self.proc_root.setStyleSheet("padding: 5px; border: 1px solid #F18F01; border-radius: 3px;")
        proc_layout.addWidget(self.proc_root)
        btn_proc = QPushButton("üìÅ")
        btn_proc.setMaximumWidth(40)
        btn_proc.setStyleSheet("""
            QPushButton {
                background-color: #F18F01; 
                color: white; 
                border: none; 
                border-radius: 3px; 
                padding: 5px;
            }
            QPushButton:hover {
                background-color: #9c5d03;
            }
        """)
        btn_proc.clicked.connect(lambda: self.select_folder(self.proc_root))
        proc_layout.addWidget(btn_proc)
        main_layout.addLayout(proc_layout)
        
        # Info sobre carpetas que se crear√°n
        carpetas_info = QLabel("""üì§ Carpetas que se crear√°n autom√°ticamente:
    ‚Ä¢ CSV-ASC (archivos procesados)    ‚Ä¢ IMAGENES (fotos con prefijo F)
    ‚Ä¢ XML (archivos LandXML)          ‚Ä¢ Planos (pantallazos JPG)
    ‚Ä¢ backups (respaldos de originales)""")
        carpetas_info.setStyleSheet("color: #666; background-color: #e8f5f3; padding: 10px; border: 1px solid #F18F01; border-radius: 3px; margin: 5px 0;")
        main_layout.addWidget(carpetas_info)
        
        main_group.setLayout(main_layout)
        layout.addWidget(main_group)
        
        # Grupo de archivos originales
        orig_group = QtWidgets.QGroupBox("üì• ARCHIVOS ORIGINALES")
        orig_layout = QVBoxLayout()
        
        # GPKG original
        gpkg_layout = QHBoxLayout()
        gpkg_layout.addWidget(QLabel("GPKG Original:"))
        self.gpkg_path = QLineEdit()
        self.gpkg_path.setPlaceholderText("Ruta al archivo Levantamientos.gpkg")
        self.gpkg_path.setStyleSheet("padding: 5px; border: 1px solid #ccc; border-radius: 3px;")
        gpkg_layout.addWidget(self.gpkg_path)
        btn_gpkg = QPushButton("üìÅ")
        btn_gpkg.setMaximumWidth(40)
        btn_gpkg.setStyleSheet("""
            QPushButton {
                background-color: #666; 
                color: white; 
                border: none; 
                border-radius: 3px; 
                padding: 5px;
            }
            QPushButton:hover {
                background-color: #555;
            }
        """)
        btn_gpkg.clicked.connect(lambda: self.select_file(self.gpkg_path, "GPKG (*.gpkg)"))
        gpkg_layout.addWidget(btn_gpkg)
        orig_layout.addLayout(gpkg_layout)
        
        # Carpeta CSV-ASC
        csv_layout = QHBoxLayout()
        csv_layout.addWidget(QLabel("Carpeta CSV-ASC:"))
        self.csv_folder = QLineEdit()
        self.csv_folder.setPlaceholderText("Carpeta con archivos CSV y ASC originales")
        self.csv_folder.setStyleSheet("padding: 5px; border: 1px solid #ccc; border-radius: 3px;")
        csv_layout.addWidget(self.csv_folder)
        btn_csv = QPushButton("üìÅ")
        btn_csv.setMaximumWidth(40)
        btn_csv.setStyleSheet("""
            QPushButton {
                background-color: #666; 
                color: white; 
                border: none; 
                border-radius: 3px; 
                padding: 5px;
            }
            QPushButton:hover {
                background-color: #555;
            }
        """)
        btn_csv.clicked.connect(lambda: self.select_folder(self.csv_folder))
        csv_layout.addWidget(btn_csv)
        orig_layout.addLayout(csv_layout)
        
        # Carpeta im√°genes
        img_layout = QHBoxLayout()
        img_layout.addWidget(QLabel("Carpeta Im√°genes:"))
        self.img_folder = QLineEdit()
        self.img_folder.setPlaceholderText("Carpeta con archivos JPG originales")
        self.img_folder.setStyleSheet("padding: 5px; border: 1px solid #ccc; border-radius: 3px;")
        img_layout.addWidget(self.img_folder)
        btn_img = QPushButton("üìÅ")
        btn_img.setMaximumWidth(40)
        btn_img.setStyleSheet("""
            QPushButton {
                background-color: #666; 
                color: white; 
                border: none; 
                border-radius: 3px; 
                padding: 5px;
            }
            QPushButton:hover {
                background-color: #555;
            }
        """)
        btn_img.clicked.connect(lambda: self.select_folder(self.img_folder))
        img_layout.addWidget(btn_img)
        orig_layout.addLayout(img_layout)
        
        orig_group.setLayout(orig_layout)
        layout.addWidget(orig_group)
        
        # Grupo de validaciones que se realizar√°n
        validation_group = QtWidgets.QGroupBox("üîç Validaciones que se realizar√°n")
        validation_layout = QVBoxLayout()
        
        validations_info = QLabel("""ESPACIALES: Intersecci√≥n con pol√≠gonos de muros y sectores
    FORMATO: Estructura de columnas y tipos de datos
    COORDENADAS: Validaci√≥n de rangos Norte/Este/Cota  
    DEM: Comparaci√≥n de cotas contra modelos digitales
    GEOMETR√çA: Generaci√≥n de ConcaveHull para archivos CSV
    ARCHIVOS: Conversi√≥n de formatos y limpieza de nombres""")
        validations_info.setStyleSheet("font-family: 'Courier New'; color: #555; background-color: #f0f8f7; padding: 10px; border: 1px solid #F18F01; border-radius: 3px;")
        validation_layout.addWidget(validations_info)
        
        validation_group.setLayout(validation_layout)
        layout.addWidget(validation_group)
        
        layout.addStretch()
        
        # Bot√≥n ejecutar con estilo mejorado
        self.btn_validation = QPushButton("üîç Ejecutar Validaci√≥n Completa")
        self.btn_validation.setStyleSheet("""
            QPushButton {
                background-color: #F18F01; 
                color: white; 
                font-weight: bold; 
                padding: 12px; 
                border: none; 
                border-radius: 5px;
                font-size: 13px;
            }
            QPushButton:hover {
                background-color: #9c5d03;
            }
            QPushButton:pressed {
                background-color: #0F6B5F;
            }
        """)
        self.btn_validation.clicked.connect(self.ejecutar_validacion)
        layout.addWidget(self.btn_validation)
        
        tab.setLayout(layout)
        self.tab_widget.addTab(tab, "1. Validaci√≥n")
    
    def create_processing_tab(self):
        """Pesta√±a 2: Procesamiento (SIN CAMBIOS)"""
        tab = QtWidgets.QWidget()
        layout = QVBoxLayout()
        
        # T√≠tulo y descripci√≥n
        title = QLabel("üó∫Ô∏è PROCESAMIENTO ESPACIAL")
        title.setStyleSheet("font-weight: bold; font-size: 14px; color: #F18F01;")
        layout.addWidget(title)
        
        desc = QLabel("Genera capas de puntos, pol√≠gonos y triangulaciones a partir de archivos validados")
        desc.setStyleSheet("color: gray; margin-bottom: 10px;")
        layout.addWidget(desc)
        
        # Grupo de salidas esperadas
        output_group = QtWidgets.QGroupBox("üì§ Salidas que se generar√°n")
        output_layout = QVBoxLayout()
        
        outputs_info = QLabel("""‚Ä¢ Grupo: Procesamiento_YYMMDD (contra√≠do y apagado)
    ‚îî‚îÄ‚îÄ Puntos/ (capas de puntos de archivos CSV)
    ‚îî‚îÄ‚îÄ Poligonos/ (concave hulls de CSV, pol√≠gonos suavizados de ASC)
    ‚îî‚îÄ‚îÄ Triangulaciones/ (TIN recortados de CSV, rasters ASC)""")
        outputs_info.setStyleSheet("font-family: 'Courier New'; color: #555; background-color: #f8f8f8; padding: 10px; border: 1px solid #ddd;")
        output_layout.addWidget(outputs_info)
        
        output_group.setLayout(output_layout)
        layout.addWidget(output_group)
        
        layout.addStretch()
        
        # Bot√≥n ejecutar con estilo
        self.btn_processing = QPushButton("‚öôÔ∏è Generar Capas Espaciales")
        self.btn_processing.setStyleSheet("""
            QPushButton {
                background-color: #F18F01; 
                color: white; 
                font-weight: bold; 
                padding: 10px; 
                border: none; 
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #9c5d03;
            }
            QPushButton:pressed {
                background-color: #164B73;
            }
        """)
        self.btn_processing.clicked.connect(self.ejecutar_procesamiento)
        layout.addWidget(self.btn_processing)
        
        tab.setLayout(layout)
        self.tab_widget.addTab(tab, "2. Procesamiento")

    def create_analysis_tab(self):
        """Pesta√±a 3: An√°lisis Completo (NUEVA con sub-pesta√±as)"""
        tab = QtWidgets.QWidget()
        layout = QVBoxLayout()
        
        # T√≠tulo principal con estilo mejorado
        header_layout = QHBoxLayout()
        icon_label = QLabel("üìä")
        icon_label.setStyleSheet("font-size: 24px; margin-right: 10px;")
        title_label = QLabel("AN√ÅLISIS COMPLETO")
        title_label.setStyleSheet("font-weight: bold; font-size: 16px; color: #F18F01;")
        header_layout.addWidget(icon_label)
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        layout.addLayout(header_layout)
        
        desc = QLabel("Ejecuta an√°lisis detallados: tabla base, vol√∫menes, pantallazos y exportaci√≥n XML")
        desc.setStyleSheet("color: gray; margin-bottom: 15px; font-size: 12px;")
        layout.addWidget(desc)
        
        # Widget de sub-pesta√±as
        self.analysis_tab_widget = QTabWidget()
        self.analysis_tab_widget.setStyleSheet("""
            QTabWidget::pane {
                border: 1px solid #C0C0C0;
                background-color: white;
            }
            QTabBar::tab {
                background-color: #f0f0f0;
                padding: 8px 12px;
                margin-right: 2px;
                border: 1px solid #C0C0C0;
                border-bottom: none;
            }
            QTabBar::tab:selected {
                background-color: white;
                border-bottom: 1px solid white;
            }
        """)
        
        # Crear las 3 sub-pesta√±as (eliminando pantallazos separados)
        self.create_table_subtab()        # 3.1
        self.create_volumes_subtab()      # 3.2 (UNIFICADO con pantallazos)  
        self.create_xml_subtab()          # 3.3 (renumerado)
        
        layout.addWidget(self.analysis_tab_widget)
        
        tab.setLayout(layout)
        self.tab_widget.addTab(tab, "3. An√°lisis")

    def create_table_subtab(self):
        """Sub-pesta√±a 3.1: Tabla Base"""
        tab = QtWidgets.QWidget()
        layout = QVBoxLayout()
        
        # Header con icono y t√≠tulo
        header_layout = QHBoxLayout()
        icon_label = QLabel("üìã")
        icon_label.setStyleSheet("font-size: 20px; margin-right: 8px;")
        title_label = QLabel("TABLA BASE DATOS")
        title_label.setStyleSheet("font-weight: bold; font-size: 14px; color: #A23B72;")
        header_layout.addWidget(icon_label)
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        layout.addLayout(header_layout)
        
        desc = QLabel("Crea tabla con v√©rtices extremos, metadata y campos calculados")
        desc.setStyleSheet("color: gray; margin-bottom: 10px;")
        layout.addWidget(desc)
        
        # Configuraci√≥n
        config_group = QtWidgets.QGroupBox("üîß Configuraci√≥n")
        config_layout = QVBoxLayout()
        
        # Protocolo topogr√°fico inicial
        protocol_layout = QHBoxLayout()
        protocol_layout.addWidget(QLabel("Protocolo topogr√°fico inicial:"))
        self.protocolo_inicio = QtWidgets.QSpinBox()
        self.protocolo_inicio.setMinimum(1)
        self.protocolo_inicio.setMaximum(9999)
        self.protocolo_inicio.setValue(1)
        self.protocolo_inicio.setToolTip("N√∫mero inicial para la secuencia de protocolos")
        protocol_layout.addWidget(self.protocolo_inicio)
        protocol_layout.addStretch()
        config_layout.addLayout(protocol_layout)
        
        config_group.setLayout(config_layout)
        layout.addWidget(config_group)
        
        # Campos que se crear√°n
        campos_group = QtWidgets.QGroupBox("üìã Campos de la tabla")
        campos_layout = QVBoxLayout()
        
        campos_info = QLabel("""METADATA: Protocolo Topogr√°fico, Muro, Fecha, Sector, Relleno
    COORDENADAS: P1-P4 (ESTE, NORTE, COTA) - v√©rtices extremos
    ARCHIVOS: Foto, Plano, Control Topogr√°fico, Operador  
    GEOMETR√çA: Area, Ancho, Largo, Cut, Fill, Espesor (m√≠n/m√°x)
    T√âCNICO: Disciplina, N¬∞ Capas""")
        campos_info.setStyleSheet("font-family: 'Courier New'; color: #555; background-color: #f8f8f8; padding: 10px; border: 1px solid #ddd;")
        campos_layout.addWidget(campos_info)
        
        campos_group.setLayout(campos_layout)
        layout.addWidget(campos_group)
        
        layout.addStretch()
        
        # Bot√≥n ejecutar
        self.btn_table = QPushButton("üìã Crear Tabla Base Datos")
        self.btn_table.setStyleSheet("""
            QPushButton {
                background-color: #A23B72; 
                color: white; 
                font-weight: bold; 
                padding: 10px; 
                border: none; 
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #7A2A56;
            }
            QPushButton:pressed {
                background-color: #5D1F41;
            }
        """)
        self.btn_table.clicked.connect(self.ejecutar_tabla)
        layout.addWidget(self.btn_table)
        
        tab.setLayout(layout)
        self.analysis_tab_widget.addTab(tab, "3.1 Tabla")

    def create_volumes_subtab(self):
        """Sub-pesta√±a 3.2: Vol√∫menes y Pantallazos (UNIFICADO)"""
        tab = QtWidgets.QWidget()
        layout = QVBoxLayout()
        
        # Header con icono y t√≠tulo
        header_layout = QHBoxLayout()
        icon_label = QLabel("ÔøΩüì∏")
        icon_label.setStyleSheet("font-size: 20px; margin-right: 8px;")
        title_label = QLabel("VOL√öMENES Y PANTALLAZOS")
        title_label.setStyleSheet("font-weight: bold; font-size: 14px; color: #F18F01;")
        header_layout.addWidget(icon_label)
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        layout.addLayout(header_layout)
        
        desc = QLabel("Proceso incremental: cut/fill + pantallazos de diferencias DEM + pegado autom√°tico")
        desc.setStyleSheet("color: gray; margin-bottom: 10px;")
        layout.addWidget(desc)
        
        # Configuraci√≥n de vol√∫menes y pantallazos
        config_group = QtWidgets.QGroupBox("‚öôÔ∏è Par√°metros de C√°lculo Volum√©trico")
        config_layout = QVBoxLayout()
        
        # N√∫mero de puntos aleatorios
        random_points_layout = QHBoxLayout()
        random_points_layout.addWidget(QLabel("Puntos aleatorios para an√°lisis:"))
        self.num_random_points = QtWidgets.QSpinBox()
        self.num_random_points.setMinimum(5)
        self.num_random_points.setMaximum(100)
        self.num_random_points.setValue(20)
        self.num_random_points.setToolTip("N√∫mero de puntos para validaci√≥n de vol√∫menes")
        random_points_layout.addWidget(self.num_random_points)
        random_points_layout.addStretch()
        config_layout.addLayout(random_points_layout)
        
        # Espesor m√≠nimo
        min_thickness_layout = QHBoxLayout()
        min_thickness_layout.addWidget(QLabel("Espesor m√≠nimo permitido:"))
        self.min_espesor = QLineEdit("0.01")
        self.min_espesor.setMaximumWidth(100)
        self.min_espesor.setToolTip("Valor m√≠nimo absoluto para espesores (metros)")
        min_thickness_layout.addWidget(self.min_espesor)
        min_thickness_layout.addWidget(QLabel("metros"))
        min_thickness_layout.addStretch()
        config_layout.addLayout(min_thickness_layout)
        
        # Algoritmo de remuestreo
        resample_layout = QHBoxLayout()
        resample_layout.addWidget(QLabel("Algoritmo de remuestreo:"))
        self.resample_algorithm = QtWidgets.QComboBox()
        self.resample_algorithm.addItems(['near', 'bilinear', 'cubic', 'cubicspline'])
        self.resample_algorithm.setCurrentText('bilinear')  # Cambiado a bilinear como default
        
        # Conectar cambio de selecci√≥n para actualizar tooltip din√°mico
        self.resample_algorithm.currentTextChanged.connect(self.update_resample_tooltip)
        self.update_resample_tooltip('bilinear')  # Establecer tooltip inicial
        
        resample_layout.addWidget(self.resample_algorithm)
        resample_layout.addStretch()
        config_layout.addLayout(resample_layout)
        
        config_group.setLayout(config_layout)
        layout.addWidget(config_group)
        
        # Configuraci√≥n de pantallazos
        screenshot_group = QtWidgets.QGroupBox("üì∏ Par√°metros de Pantallazos")
        screenshot_layout = QVBoxLayout()
        
        # Dimensiones
        dimensions_layout = QHBoxLayout()
        dimensions_layout.addWidget(QLabel("Dimensiones:"))
        
        self.screenshot_width = QtWidgets.QSpinBox()
        self.screenshot_width.setMinimum(400)
        self.screenshot_width.setMaximum(2000)
        self.screenshot_width.setValue(800)
        self.screenshot_width.setSuffix(" px")
        dimensions_layout.addWidget(self.screenshot_width)
        
        dimensions_layout.addWidget(QLabel("√ó"))
        
        self.screenshot_height = QtWidgets.QSpinBox()
        self.screenshot_height.setMinimum(300)
        self.screenshot_height.setMaximum(1500)
        self.screenshot_height.setValue(500)
        self.screenshot_height.setSuffix(" px")
        dimensions_layout.addWidget(self.screenshot_height)
        
        dimensions_layout.addStretch()
        screenshot_layout.addLayout(dimensions_layout)
        
        # Factor de expansi√≥n
        expansion_layout = QHBoxLayout()
        expansion_layout.addWidget(QLabel("Factor de expansi√≥n:"))
        self.expansion_factor = QtWidgets.QDoubleSpinBox()
        self.expansion_factor.setMinimum(1.0)
        self.expansion_factor.setMaximum(3.0)
        self.expansion_factor.setValue(1.3)
        self.expansion_factor.setSingleStep(0.1)
        self.expansion_factor.setToolTip("Margen alrededor del √°rea (1.0 = sin margen)")
        expansion_layout.addWidget(self.expansion_factor)
        expansion_layout.addStretch()
        screenshot_layout.addLayout(expansion_layout)
        
        # Capa de fondo
        background_layout = QHBoxLayout()
        background_layout.addWidget(QLabel("Capa de fondo:"))
        self.background_layer = QLineEdit("tif")
        self.background_layer.setToolTip("Nombre de la capa que se usar√° como fondo")
        background_layout.addWidget(self.background_layer)
        background_layout.addStretch()
        screenshot_layout.addLayout(background_layout)
        
        screenshot_group.setLayout(screenshot_layout)
        layout.addWidget(screenshot_group)
        
        # Proceso incremental unificado
        process_group = QtWidgets.QGroupBox("üîÑ Proceso Incremental Unificado")
        process_layout = QVBoxLayout()
        
        process_info = QLabel("""NUEVO FLUJO UNIFICADO:
    1. ORDEN CRONOL√ìGICO: Procesa filas por fecha de tabla
    2. C√ÅLCULO VOLUMEN: TIN_nuevo vs DEM_muro ‚Üí Cut/Fill/Espesor
    3. PANTALLAZOS DEM: Diferencia TIN vs DEM con colores cut/fill 
    4. PEGADO INCREMENTAL: TIN_nuevo se pega sobre DEM_muro
    5. ACTUALIZACI√ìN: DEM_muro listo para siguiente iteraci√≥n

    Resultado: Cut, Fill, Espesor + Pantallazos regulares + Pantallazos MovTierra""")
        process_info.setStyleSheet("font-family: 'Courier New'; color: #555; background-color: #fff8e7; padding: 10px; border: 1px solid #F18F01; border-radius: 3px;")
        process_layout.addWidget(process_info)
        
        process_group.setLayout(process_layout)
        layout.addWidget(process_group)
        
        layout.addStretch()
        
        # Bot√≥n ejecutar unificado
        self.btn_volume_screenshot = QPushButton("üìäüì∏ Ejecutar Vol√∫menes y Pantallazos")
        self.btn_volume_screenshot.setStyleSheet("""
            QPushButton {
                background-color: #F18F01; 
                color: white; 
                font-weight: bold; 
                padding: 12px; 
                border: none; 
                border-radius: 5px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #D17A01;
            }
            QPushButton:pressed {
                background-color: #B16801;
            }
        """)
        self.btn_volume_screenshot.clicked.connect(self.ejecutar_volumenes_pantallazos)
        layout.addWidget(self.btn_volume_screenshot)
        
        tab.setLayout(layout)
        self.analysis_tab_widget.addTab(tab, "3.2 Vol+Screenshots")

    def create_screenshots_subtab(self):
        """Sub-pesta√±a 3.3: Pantallazos"""
        tab = QtWidgets.QWidget()
        layout = QVBoxLayout()
        
        # Header con icono y t√≠tulo
        header_layout = QHBoxLayout()
        icon_label = QLabel("üì∏")
        icon_label.setStyleSheet("font-size: 20px; margin-right: 8px;")
        title_label = QLabel("GENERACI√ìN DE PANTALLAZOS")
        title_label.setStyleSheet("font-weight: bold; font-size: 14px; color: #C73E1D;")
        header_layout.addWidget(icon_label)
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        layout.addLayout(header_layout)
        
        desc = QLabel("Genera im√°genes JPG de los pol√≠gonos con capa de fondo para documentaci√≥n")
        desc.setStyleSheet("color: gray; margin-bottom: 10px;")
        layout.addWidget(desc)
        
        # Configuraci√≥n de imagen
        image_group = QtWidgets.QGroupBox("üñºÔ∏è Configuraci√≥n de Imagen")
        image_layout = QVBoxLayout()
        
        # Dimensiones
        dimensions_layout = QHBoxLayout()
        dimensions_layout.addWidget(QLabel("Dimensiones:"))
        
        self.screenshot_width = QtWidgets.QSpinBox()
        self.screenshot_width.setMinimum(400)
        self.screenshot_width.setMaximum(2000)
        self.screenshot_width.setValue(800)
        self.screenshot_width.setSuffix(" px")
        dimensions_layout.addWidget(self.screenshot_width)
        
        dimensions_layout.addWidget(QLabel("√ó"))
        
        self.screenshot_height = QtWidgets.QSpinBox()
        self.screenshot_height.setMinimum(300)
        self.screenshot_height.setMaximum(1500)
        self.screenshot_height.setValue(500)
        self.screenshot_height.setSuffix(" px")
        dimensions_layout.addWidget(self.screenshot_height)
        
        dimensions_layout.addStretch()
        image_layout.addLayout(dimensions_layout)
        
        # Factor de expansi√≥n
        expansion_layout = QHBoxLayout()
        expansion_layout.addWidget(QLabel("Factor de expansi√≥n:"))
        self.expansion_factor = QtWidgets.QDoubleSpinBox()
        self.expansion_factor.setMinimum(1.0)
        self.expansion_factor.setMaximum(3.0)
        self.expansion_factor.setValue(1.3)
        self.expansion_factor.setSingleStep(0.1)
        self.expansion_factor.setToolTip("Margen alrededor del pol√≠gono (1.0 = sin margen)")
        expansion_layout.addWidget(self.expansion_factor)
        expansion_layout.addStretch()
        image_layout.addLayout(expansion_layout)
        
        # Capa de fondo
        background_layout = QHBoxLayout()
        background_layout.addWidget(QLabel("Capa de fondo:"))
        self.background_layer = QLineEdit("tif")
        self.background_layer.setToolTip("Nombre de la capa que se usar√° como fondo")
        background_layout.addWidget(self.background_layer)
        background_layout.addStretch()
        image_layout.addLayout(background_layout)
        
        image_group.setLayout(image_layout)
        layout.addWidget(image_group)
        
        # Estilo de pol√≠gono
        style_group = QtWidgets.QGroupBox("üé® Estilo de Pol√≠gono")
        style_layout = QVBoxLayout()
        
        style_info = QLabel("""CONTORNO: Rojo, grosor 1.5px
    RELLENO: Transparente (sin relleno)
    OPACIDAD: 100%
    FORMATO: JPG con fondo blanco""")
        style_info.setStyleSheet("font-family: 'Courier New'; color: #555; background-color: #ffe6e6; padding: 10px; border: 1px solid #C73E1D; border-radius: 3px;")
        style_layout.addWidget(style_info)
        
        style_group.setLayout(style_layout)
        layout.addWidget(style_group)
        
        layout.addStretch()
        
        # Bot√≥n ejecutar
        self.btn_screenshots = QPushButton("üñºÔ∏è Generar Pantallazos")
        self.btn_screenshots.setStyleSheet("""
            QPushButton {
                background-color: #C73E1D; 
                color: white; 
                font-weight: bold; 
                padding: 10px; 
                border: none; 
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #A33118;
            }
            QPushButton:pressed {
                background-color: #7D2612;
            }
        """)
        self.btn_screenshots.clicked.connect(self.ejecutar_pantallazos)
        layout.addWidget(self.btn_screenshots)
        
        tab.setLayout(layout)
        self.analysis_tab_widget.addTab(tab, "3.3 Pantallazos")

    def create_xml_subtab(self):
        """Sub-pesta√±a 3.3: Export XML"""
        tab = QtWidgets.QWidget()
        layout = QVBoxLayout()
        
        # Header con icono y t√≠tulo
        header_layout = QHBoxLayout()
        icon_label = QLabel("üìÑ")
        icon_label.setStyleSheet("font-size: 20px; margin-right: 8px;")
        title_label = QLabel("EXPORTACI√ìN A XML")
        title_label.setStyleSheet("font-weight: bold; font-size: 14px; color: #6A4C93;")
        header_layout.addWidget(icon_label)
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        layout.addLayout(header_layout)
        
        desc = QLabel("Exporta superficies trianguladas a formato LandXML 1.2 est√°ndar")
        desc.setStyleSheet("color: gray; margin-bottom: 10px;")
        layout.addWidget(desc)
        
        # Formato LandXML
        format_group = QtWidgets.QGroupBox("üìã Formato LandXML")
        format_layout = QVBoxLayout()
        
        format_info = QLabel("""EST√ÅNDAR: LandXML 1.2
    UNIDADES: M√©tricos (metro, metro cuadrado, metro c√∫bico)
    SUPERFICIE: Triangulated Irregular Network (TIN)
    DATOS: Puntos 3D + Caras triangulares
    METADATOS: √Årea 2D/3D, elevaci√≥n m√≠n/m√°x
    
    CONFIGURACI√ìN: Optimizada autom√°ticamente
    ‚Ä¢ Intercambio XY: Activado
    ‚Ä¢ Muestreo rasters: Cada 2 p√≠xeles""")
        format_info.setStyleSheet("font-family: 'Courier New'; color: #555; background-color: #f3f0ff; padding: 10px; border: 1px solid #6A4C93; border-radius: 3px;")
        format_layout.addWidget(format_info)
        
        format_group.setLayout(format_layout)
        layout.addWidget(format_group)
        
        # Procesamiento por tipo
        process_group = QtWidgets.QGroupBox("üîÑ Procesamiento por Tipo")
        process_layout = QVBoxLayout()
        
        process_info = QLabel("""CSV ‚Üí Puntos de capa + Triangulaci√≥n Delaunay
    ASC ‚Üí Muestreo de raster + Triangulaci√≥n Delaunay

    Salida: PROC_ROOT/XML/{nombre_base}.xml""")
        process_info.setStyleSheet("color: #666; background-color: #f9f9f9; padding: 8px; border-left: 3px solid #6A4C93;")
        process_layout.addWidget(process_info)
        
        process_group.setLayout(process_layout)
        layout.addWidget(process_group)
        
        layout.addStretch()
        
        # Bot√≥n ejecutar
        self.btn_xml = QPushButton("üì§ Exportar a LandXML")
        self.btn_xml.setStyleSheet("""
            QPushButton {
                background-color: #6A4C93; 
                color: white; 
                font-weight: bold; 
                padding: 10px; 
                border: none; 
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #563A7A;
            }
            QPushButton:pressed {
                background-color: #422C5E;
            }
        """)
        self.btn_xml.clicked.connect(self.ejecutar_xml)
        layout.addWidget(self.btn_xml)
        
        tab.setLayout(layout)
        self.analysis_tab_widget.addTab(tab, "3.3 XML")
    
    def init_connections(self):
        """Conectar se√±ales"""
        self.btn_close.clicked.connect(self.close)
    
    def select_file(self, line_edit, filter_text):
        """Seleccionar archivo"""
        file_path, _ = QFileDialog.getOpenFileName(self, "Seleccionar archivo", "", filter_text)
        if file_path:
            line_edit.setText(file_path)
    
    def select_folder(self, line_edit):
        """Seleccionar carpeta"""
        folder_path = QFileDialog.getExistingDirectory(self, "Seleccionar carpeta")
        if folder_path:
            line_edit.setText(folder_path)
    
    def log_message(self, message):
        """Agregar mensaje al log"""
        self.log_text.append(f"[{QTime.currentTime().toString()}] {message}")
    
    def load_settings(self):
        """Cargar configuraci√≥n guardada"""
        settings = QSettings()
        
        # Cargar rutas guardadas
        self.proc_root.setText(settings.value("canchas/proc_root", r"E:\CANCHAS_QFIELD\QGIS PROCESAMIENTO\Archivos Procesados TERRENO"))
        self.gpkg_path.setText(settings.value("canchas/gpkg_path", ""))
        self.csv_folder.setText(settings.value("canchas/csv_folder", ""))
        self.img_folder.setText(settings.value("canchas/img_folder", ""))

    def save_settings(self):
        """Guardar configuraci√≥n"""
        settings = QSettings()
        
        settings.setValue("canchas/proc_root", self.proc_root.text())
        settings.setValue("canchas/gpkg_path", self.gpkg_path.text())
        settings.setValue("canchas/csv_folder", self.csv_folder.text())
        settings.setValue("canchas/img_folder", self.img_folder.text())

    def closeEvent(self, event):
        """Al cerrar el di√°logo, guardar configuraci√≥n"""
        self.save_settings()
        super().closeEvent(event)
    
    # ===================================================================
    # M√âTODOS EJECUTAR (SIN CAMBIOS - TODA LA FUNCIONALIDAD INTACTA)
    # ===================================================================
    
    def ejecutar_validacion(self):
        """Ejecutar proceso de validaci√≥n completo"""
        # Verificar que PROC_ROOT est√© configurado
        if not self.proc_root.text().strip():
            self.log_message("‚ùå Error: Debe configurar la carpeta de procesamiento (PROC_ROOT)")
            return
            
        # Verificar que existan las rutas originales
        if not self.gpkg_path.text().strip():
            self.log_message("‚ùå Error: Debe seleccionar el archivo GPKG original")
            return
            
        if not self.csv_folder.text().strip():
            self.log_message("‚ùå Error: Debe seleccionar la carpeta CSV-ASC")
            return
            
        if not self.img_folder.text().strip():
            self.log_message("‚ùå Error: Debe seleccionar la carpeta de im√°genes")
            return
        
        # Mostrar progreso
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)
        
        self.log_message("üîç Iniciando validaci√≥n completa...")
        self.log_message(f"üìÅ PROC_ROOT: {self.proc_root.text()}")
        self.log_message(f"üìÑ GPKG: {self.gpkg_path.text()}")
        self.log_message(f"üìä CSV-ASC: {self.csv_folder.text()}")
        self.log_message(f"üñºÔ∏è Im√°genes: {self.img_folder.text()}")
        
        try:
            # Importar el procesador completo
            from .core.validation import ValidationProcessor
            
            # Crear procesador con callbacks
            processor = ValidationProcessor(
                proc_root=self.proc_root.text(),
                orig_gpkg=self.gpkg_path.text(),
                dir_csv_orig=self.csv_folder.text(),
                dir_img_orig=self.img_folder.text(),
                progress_callback=self.update_progress,
                log_callback=self.log_message
            )
            
            # Ejecutar validaci√≥n completa
            resultado = processor.ejecutar_validacion_completa()
            
            if resultado['success']:
                self.log_message("üéâ ¬°Validaci√≥n completada exitosamente!")
                self.log_message(f"üì¶ Backup creado en: {resultado.get('backup_folder', 'N/A')}")
                self.save_settings()
            else:
                self.log_message(f"‚ùå Error: {resultado['message']}")
                if 'details' in resultado:
                    self.log_message("üìã Ver detalles del error arriba")
                
        except ImportError as e:
            self.log_message(f"‚ùå Error: No se pudo importar el m√≥dulo de validaci√≥n: {e}")
        except Exception as e:
            self.log_message(f"‚ùå Error inesperado: {e}")
        finally:
            self.progress_bar.setVisible(False)

    def update_progress(self, value, message=""):
        """Callback para actualizar progreso"""
        self.progress_bar.setValue(value)
        if message:
            self.log_message(f"üìã {message}")
    
    def update_resample_tooltip(self, algorithm):
        """Actualiza el tooltip del algoritmo de remuestreo seg√∫n la selecci√≥n"""
        tooltips = {
            'near': """üîµ NEAR (Vecino m√°s cercano) - R√ÅPIDO
            
‚úÖ VENTAJAS:
‚Ä¢ M√°s r√°pido computacionalmente
‚Ä¢ Preserva valores originales exactamente  
‚Ä¢ No introduce nuevos valores

‚ùå DESVENTAJAS:
‚Ä¢ Puede crear efectos de escalera
‚Ä¢ Menos suave visualmente
‚Ä¢ Discontinuidades en an√°lisis volum√©trico

üí° MEJOR PARA: Datos categ√≥ricos o cuando se requiere velocidad m√°xima""",

            'bilinear': """üü¢ BILINEAR (Interpolaci√≥n Bilineal) - RECOMENDADO ‚≠ê
            
‚úÖ VENTAJAS:
‚Ä¢ Equilibrio perfecto velocidad/calidad
‚Ä¢ Transiciones suaves y realistas
‚Ä¢ Ideal para an√°lisis volum√©trico
‚Ä¢ Reduce efectos de escalera

‚ùå DESVENTAJAS:
‚Ä¢ Introduce valores promediados
‚Ä¢ Ligeramente m√°s lento que NEAR

üí° MEJOR PARA: An√°lisis volum√©trico, topograf√≠a, datos continuos (TU CASO)""",

            'cubic': """üü° CUBIC (Interpolaci√≥n C√∫bica) - ALTA CALIDAD
            
‚úÖ VENTAJAS:
‚Ä¢ Muy suave y realista
‚Ä¢ Preserva mejor las curvas
‚Ä¢ Excelente calidad visual
‚Ä¢ Ideal para visualizaci√≥n

‚ùå DESVENTAJAS:
‚Ä¢ M√°s lento que bilinear
‚Ä¢ Puede crear valores irreales (overshooting)
‚Ä¢ Computacionalmente intensivo

üí° MEJOR PARA: Visualizaci√≥n de alta calidad, an√°lisis detallados""",

            'cubicspline': """üî¥ CUBIC SPLINE - M√ÅXIMA CALIDAD
            
‚úÖ VENTAJAS:
‚Ä¢ M√°xima suavidad posible
‚Ä¢ Mejor preservaci√≥n de curvaturas
‚Ä¢ Calidad visual superior

‚ùå DESVENTAJAS:
‚Ä¢ El m√°s lento de todos
‚Ä¢ Mayor posibilidad de artefactos
‚Ä¢ Puede ser excesivo para an√°lisis volum√©trico

üí° MEJOR PARA: An√°lisis cient√≠ficos muy detallados, investigaci√≥n avanzada"""
        }
        
        self.resample_algorithm.setToolTip(tooltips.get(algorithm, "Algoritmo de remuestreo para alinear rasters"))
        
    def ejecutar_procesamiento(self):
        """Ejecutar proceso de procesamiento espacial"""
        # Verificar que PROC_ROOT est√© configurado
        if not self.proc_root.text().strip():
            self.log_message("‚ùå Error: Debe configurar la carpeta de procesamiento")
            return

        # Mostrar progreso
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)
        
        self.log_message("‚öôÔ∏è Iniciando procesamiento espacial...")
        self.log_message(f"üìÅ PROC_ROOT: {self.proc_root.text()}")
        # Par√°metros fijos de procesamiento optimizados (configurables en c√≥digo)
        pixel_size = 0.1  # Resoluci√≥n TIN en metros
        suavizado_tolerance = 1.0  # Tolerancia suavizado ASC en metros  
        min_dist_vertices = 2.0  # Distancia m√≠nima entre v√©rtices en metros
        self.log_message(f"üîß P√≠xel TIN: {pixel_size} metros")
        self.log_message(f"üéØ Tolerancia suavizado: {suavizado_tolerance} metros")
        self.log_message(f"üìè Distancia m√≠nima v√©rtices: {min_dist_vertices} metros")
        
        try:
            # Importar el procesador
            from .core.processing import ProcessingProcessor
            
            # Crear procesador con par√°metros optimizados
            processor = ProcessingProcessor(
                proc_root=self.proc_root.text(),
                pixel_size=pixel_size,
                suavizado_tolerance=suavizado_tolerance,
                min_dist_vertices=min_dist_vertices,
                progress_callback=self.update_progress,
                log_callback=self.log_message
            )
            
            # Ejecutar procesamiento completo
            resultado = processor.ejecutar_procesamiento_completo()
            
            if resultado['success']:
                self.log_message("üéâ ¬°Procesamiento espacial completado exitosamente!")
                self.log_message(f"üìä {resultado.get('total_archivos', 0)} archivos procesados")
                self.log_message(f"üìÅ Grupo creado: {resultado.get('group_name', 'N/A')}")
                self.save_settings()
            else:
                self.log_message(f"‚ùå Error: {resultado['message']}")
                if 'details' in resultado:
                    self.log_message("üìã Ver detalles del error arriba")
                
        except Exception as e:
            self.log_message(f"‚ùå Error inesperado: {e}")
        finally:
            self.progress_bar.setVisible(False)
        
    def ejecutar_tabla(self):
        """Ejecutar proceso de creaci√≥n de tabla base"""
        # Verificar que PROC_ROOT est√© configurado
        if not self.proc_root.text().strip():
            self.log_message("‚ùå Error: Debe configurar la carpeta de procesamiento")
            return

        # Mostrar progreso
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)
        
        self.log_message("üìã Iniciando creaci√≥n de tabla base...")
        self.log_message(f"üìÅ PROC_ROOT: {self.proc_root.text()}")
        self.log_message(f"üî¢ Protocolo inicial: {self.protocolo_inicio.value()}")
        
        try:
            # Importar el procesador
            from .core.table_creation import TableCreationProcessor
            
            # Crear procesador con par√°metros de la GUI
            processor = TableCreationProcessor(
                proc_root=self.proc_root.text(),
                protocolo_topografico_inicio=self.protocolo_inicio.value(),
                progress_callback=self.update_progress,
                log_callback=self.log_message
            )
            
            # Ejecutar creaci√≥n de tabla completa
            resultado = processor.ejecutar_creacion_tabla_completa()
            
            if resultado['success']:
                self.log_message("üéâ ¬°Tabla base creada exitosamente!")
                self.log_message(f"üìä {resultado.get('registros_creados', 0)} registros creados")
                self.log_message(f"üìã Tabla: {resultado.get('tabla_nombre', 'N/A')}")
                self.save_settings()
            else:
                self.log_message(f"‚ùå Error: {resultado['message']}")
                if 'details' in resultado:
                    self.log_message("üìã Ver detalles del error arriba")
                
        except Exception as e:
            self.log_message(f"‚ùå Error inesperado: {e}")
        finally:
            self.progress_bar.setVisible(False)
        
    def ejecutar_volumenes(self):
        """Ejecutar proceso de c√°lculo de vol√∫menes"""
        # Verificar que PROC_ROOT est√© configurado
        if not self.proc_root.text().strip():
            self.log_message("‚ùå Error: Debe configurar la carpeta de procesamiento")
            return

        # Mostrar progreso
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)
        
        self.log_message("üìä Iniciando c√°lculo de vol√∫menes y espesores...")
        self.log_message(f"üìÅ PROC_ROOT: {self.proc_root.text()}")
        self.log_message(f"üéØ Puntos aleatorios: {self.num_random_points.value()}")
        self.log_message(f"üìè Espesor m√≠nimo: {self.min_espesor.text()} metros")
        self.log_message(f"üîÑ Algoritmo remuestreo: {self.resample_algorithm.currentText()}")
        
        try:
            # Importar el procesador
            from .core.volume_calculation import VolumeCalculationProcessor
            
            # Crear procesador con par√°metros de la GUI
            processor = VolumeCalculationProcessor(
                proc_root=self.proc_root.text(),
                num_random_points=self.num_random_points.value(),
                min_espesor=float(self.min_espesor.text()),
                resample_algorithm=self.resample_algorithm.currentText(),
                progress_callback=self.update_progress,
                log_callback=self.log_message
            )
            
            # Ejecutar c√°lculo completo
            resultado = processor.ejecutar_calculo_volumenes_completo()
            
            if resultado['success']:
                self.log_message("üéâ ¬°C√°lculo de vol√∫menes completado exitosamente!")
                self.log_message(f"üìä {resultado.get('registros_procesados', 0)} registros procesados")
                self.log_message(f"üó∫Ô∏è DEMs actualizados: {', '.join(resultado.get('dem_actualizados', []))}")
                self.save_settings()
            else:
                self.log_message(f"‚ùå Error: {resultado['message']}")
                if 'details' in resultado:
                    self.log_message("üìã Ver detalles del error arriba")
                
        except Exception as e:
            self.log_message(f"‚ùå Error inesperado: {e}")
        finally:
            self.progress_bar.setVisible(False)
        
    def ejecutar_pantallazos(self):
        """Ejecutar proceso de generaci√≥n de pantallazos"""
        # Verificar que PROC_ROOT est√© configurado
        if not self.proc_root.text().strip():
            self.log_message("‚ùå Error: Debe configurar la carpeta de procesamiento")
            return

        # Mostrar progreso
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)
        
        self.log_message("üì∏ Iniciando generaci√≥n de pantallazos...")
        self.log_message(f"üìÅ PROC_ROOT: {self.proc_root.text()}")
        self.log_message(f"üìê Dimensiones: {self.screenshot_width.value()}√ó{self.screenshot_height.value()} px")
        self.log_message(f"üîç Factor expansi√≥n: {self.expansion_factor.value()}")
        self.log_message(f"üñºÔ∏è Capa fondo: {self.background_layer.text()}")
        
        try:
            # Importar el procesador
            from .core.screenshot_generation import ScreenshotGenerationProcessor
            
            # Crear procesador con par√°metros de la GUI
            processor = ScreenshotGenerationProcessor(
                proc_root=self.proc_root.text(),
                screenshot_width=self.screenshot_width.value(),
                screenshot_height=self.screenshot_height.value(),
                expansion_factor=self.expansion_factor.value(),
                background_layer=self.background_layer.text(),
                progress_callback=self.update_progress,
                log_callback=self.log_message
            )
            
            # Ejecutar generaci√≥n completa
            resultado = processor.ejecutar_generacion_pantallazos_completa()
            
            if resultado['success']:
                self.log_message("üéâ ¬°Pantallazos generados exitosamente!")
                self.log_message(f"üì∏ {resultado.get('pantallazos_exitosos', 0)}/{resultado.get('total_pantallazos', 0)} pantallazos exitosos")
                self.log_message(f"üìÅ Guardados en: {resultado.get('carpeta_salida', 'N/A')}")
                self.save_settings()
            else:
                self.log_message(f"‚ùå Error: {resultado['message']}")
                if 'details' in resultado:
                    self.log_message("üìã Ver detalles del error arriba")
                
        except Exception as e:
            self.log_message(f"‚ùå Error inesperado: {e}")
        finally:
            self.progress_bar.setVisible(False)
    
    def ejecutar_volumenes_pantallazos(self):
        """Ejecutar proceso unificado de vol√∫menes y pantallazos"""
        # Verificar que PROC_ROOT est√© configurado
        if not self.proc_root.text().strip():
            self.log_message("‚ùå Error: Debe configurar la carpeta de procesamiento")
            return

        # Mostrar progreso
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)
        
        self.log_message("üìäüì∏ Iniciando proceso unificado de vol√∫menes y pantallazos...")
        self.log_message(f"üìÅ PROC_ROOT: {self.proc_root.text()}")
        self.log_message(f"üéØ Puntos aleatorios: {self.num_random_points.value()}")
        self.log_message(f"üìè Espesor m√≠nimo: {self.min_espesor.text()} metros")
        self.log_message(f"üîÑ Algoritmo remuestreo: {self.resample_algorithm.currentText()}")
        self.log_message(f"üìê Dimensiones im√°genes: {self.screenshot_width.value()}√ó{self.screenshot_height.value()} px")
        self.log_message(f"üîç Factor expansi√≥n: {self.expansion_factor.value()}")
        self.log_message(f"üñºÔ∏è Capa fondo: {self.background_layer.text()}")
        
        try:
            # Importar el procesador unificado
            from .core.volume_screenshot import VolumeScreenshotProcessor
            
            # Crear procesador con par√°metros de la GUI
            processor = VolumeScreenshotProcessor(
                proc_root=self.proc_root.text(),
                num_random_points=self.num_random_points.value(),
                min_espesor=float(self.min_espesor.text()),
                resample_algorithm=self.resample_algorithm.currentText(),
                screenshot_width=self.screenshot_width.value(),
                screenshot_height=self.screenshot_height.value(),
                expansion_factor=self.expansion_factor.value(),
                background_layer=self.background_layer.text(),
                progress_callback=self.update_progress,
                log_callback=self.log_message
            )
            
            # Ejecutar proceso unificado
            resultado = processor.ejecutar_calculo_volumenes_con_pantallazos()
            
            if resultado['success']:
                self.log_message("üéâ ¬°Proceso unificado completado exitosamente!")
                self.log_message(f"üìä {resultado.get('registros_procesados', 0)} registros procesados")
                self.log_message(f"üì∏ {resultado.get('pantallazos_exitosos', 0)} pantallazos generados")
                self.log_message(f"üìÅ Planos regulares: {resultado.get('carpeta_planos', 'N/A')}")
                self.log_message(f"üìÅ Planos MovTierra: {resultado.get('carpeta_movtierra', 'N/A')}")
                self.save_settings()
            else:
                self.log_message(f"‚ùå Error: {resultado['message']}")
                if 'details' in resultado:
                    self.log_message("üìã Ver detalles del error arriba")
                
        except Exception as e:
            self.log_message(f"‚ùå Error inesperado: {e}")
        finally:
            self.progress_bar.setVisible(False)
        
    def ejecutar_xml(self):
        """Ejecutar proceso de exportaci√≥n XML"""
        # Verificar que PROC_ROOT est√© configurado
        if not self.proc_root.text().strip():
            self.log_message("‚ùå Error: Debe configurar la carpeta de procesamiento")
            return

        # Mostrar progreso
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)
        
        self.log_message("üìÑ Iniciando exportaci√≥n a LandXML...")
        self.log_message(f"üìÅ PROC_ROOT: {self.proc_root.text()}")
        # Configuraci√≥n optimizada fija (configurable en c√≥digo)
        swap_xy = True  # Intercambiar coordenadas X-Y (com√∫n para sistemas locales)
        raster_sample_step = 2  # Muestreo cada 2 p√≠xeles (equilibrio calidad/rendimiento)
        self.log_message(f"üîÑ Intercambiar X-Y: {'S√≠' if swap_xy else 'No'}")
        self.log_message(f"üìê Paso muestreo rasters: {raster_sample_step} p√≠xeles")
        
        try:
            # Importar el procesador
            from .core.xml_export import XMLExportProcessor
            
            # Crear procesador con configuraci√≥n optimizada
            processor = XMLExportProcessor(
                proc_root=self.proc_root.text(),
                swap_xy=swap_xy,
                raster_sample_step=raster_sample_step,
                progress_callback=self.update_progress,
                log_callback=self.log_message
            )
            
            # Ejecutar exportaci√≥n completa
            resultado = processor.ejecutar_exportacion_xml_completa()
            
            if resultado['success']:
                self.log_message("üéâ ¬°Exportaci√≥n XML completada exitosamente!")
                self.log_message(f"üìÑ {resultado.get('archivos_exitosos', 0)}/{resultado.get('total_archivos', 0)} archivos XML generados")
                self.log_message(f"üìÅ Guardados en: {resultado.get('carpeta_salida', 'N/A')}")
                self.save_settings()
            else:
                self.log_message(f"‚ùå Error: {resultado['message']}")
                if 'capas_disponibles' in resultado:
                    self.log_message(f"üìã Capas disponibles: {', '.join(resultado['capas_disponibles'])}")
                if 'subgrupos_disponibles' in resultado:
                    self.log_message(f"üìã Subgrupos disponibles: {', '.join(resultado['subgrupos_disponibles'])}")
                if 'details' in resultado:
                    self.log_message("üìã Ver detalles del error arriba")
                
        except Exception as e:
            self.log_message(f"‚ùå Error inesperado: {e}")
        finally:
            self.progress_bar.setVisible(False)

    def create_reports_tab(self):
        """Pesta√±a 4: Datos para Reporte"""
        tab = QtWidgets.QWidget()
        layout = QVBoxLayout()
        
        # Header principal
        header_layout = QHBoxLayout()
        icon_label = QLabel("üìÑ")
        icon_label.setStyleSheet("font-size: 24px; margin-right: 10px;")
        title_label = QLabel("DATOS PARA REPORTE")
        title_label.setStyleSheet("font-weight: bold; font-size: 16px; color: #2E4057;")
        header_layout.addWidget(icon_label)
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        layout.addLayout(header_layout)
        
        desc = QLabel("Genera datos auxiliares para reportes y realiza an√°lisis hist√≥rico")
        desc.setStyleSheet("color: gray; margin-bottom: 15px; font-size: 12px;")
        layout.addWidget(desc)
        
        # Configuraci√≥n de reportes
        config_group = QtWidgets.QGroupBox("üìã Tablas utilizadas")
        config_layout = QVBoxLayout()
        
        # Info de la tabla base
        table_info = QLabel("ÔøΩ Tabla Base Datos: Contiene los datos actuales")
        table_info.setStyleSheet("color: #666; margin: 5px 0;")
        config_layout.addWidget(table_info)
        
        # Info de la tabla hist√≥rica
        table_hist_info = QLabel("üìä DATOS HISTORICOS: Almacena todos los datos hist√≥ricos y actuales")
        table_hist_info.setStyleSheet("color: #666; margin: 5px 0;")
        config_layout.addWidget(table_hist_info)
        
        config_group.setLayout(config_layout)
        layout.addWidget(config_group)
        
        # Proceso de Fusi√≥n
        merge_group = QtWidgets.QGroupBox("ÔøΩ Proceso de Fusi√≥n de Datos")
        merge_layout = QVBoxLayout()
        
        merge_info = QLabel("""Al ejecutar "Generar Datos Reporte", se realizan las siguientes acciones:

        0Ô∏è‚É£ Detecci√≥n y normalizaci√≥n autom√°tica de formatos de fecha
        1Ô∏è‚É£ Fusi√≥n de datos hist√≥ricos
        2Ô∏è‚É£ An√°lisis hist√≥rico (fechas de intervenci√≥n y crecimiento anual)
        3Ô∏è‚É£ Generaci√≥n de gr√°ficos de barras por sector (G1)
        4Ô∏è‚É£ Generaci√≥n de series temporales de espesores (G2)
        5Ô∏è‚É£ Generaci√≥n de pantallazos heatmap (PH)
        6Ô∏è‚É£ Clasificaci√≥n autom√°tica de espesores

        La tabla "DATOS HISTORICOS" queda actualizada con todos los datos procesados
        y es la que debe utilizarse como fuente para reportes.""")
        merge_info.setStyleSheet("font-family: 'Courier New'; color: #555; background-color: #f8f8f8; padding: 10px; border: 1px solid #ddd; border-radius: 3px;")
        merge_layout.addWidget(merge_info)
        
        merge_group.setLayout(merge_layout)
        layout.addWidget(merge_group)
        
        # An√°lisis hist√≥rico
        historical_group = QtWidgets.QGroupBox("üìà An√°lisis Hist√≥rico")
        historical_layout = QVBoxLayout()
        
        # Periodo para crecimiento anual
        period_layout = QHBoxLayout()
        period_layout.addWidget(QLabel("Periodo para c√°lculo de crecimiento anual:"))
        self.dias_crecimiento = QtWidgets.QSpinBox()
        self.dias_crecimiento.setMinimum(30)
        self.dias_crecimiento.setMaximum(730)  # 2 a√±os
        self.dias_crecimiento.setValue(365)    # 1 a√±o por defecto
        self.dias_crecimiento.setSuffix(" d√≠as")
        period_layout.addWidget(self.dias_crecimiento)
        period_layout.addStretch()
        historical_layout.addLayout(period_layout)
        
        # Informaci√≥n de columnas generadas
        columnas_info = QLabel("""El proceso de an√°lisis hist√≥rico genera las siguientes columnas:

1Ô∏è‚É£ "Ultima Intervencion": Fecha de √∫ltima intervenci√≥n para mismo Muro/Sector
    ‚Ä¢ Busca en DATOS HISTORICOS intervenciones anteriores a la fecha del registro
    ‚Ä¢ Formato: YYYY-MM-DD (ej: 2025-05-15)

2Ô∏è‚É£ "Ultimo Crecimiento Anual": Suma de espesores en el per√≠odo configurado
    ‚Ä¢ Calcula la suma de espesores para registros dentro del per√≠odo establecido
    ‚Ä¢ Formato: N√∫mero decimal (ej: 24.464)""")
        columnas_info.setStyleSheet("font-family: 'Courier New'; color: #555; background-color: #f0f0ff; padding: 10px; border: 1px solid #ddd; border-radius: 3px; margin-top: 10px;")
        historical_layout.addWidget(columnas_info)
        
        historical_group.setLayout(historical_layout)
        layout.addWidget(historical_group)
        
        # Clasificaci√≥n de Espesores
        clasificacion_group = QtWidgets.QGroupBox("üìè Clasificaci√≥n Autom√°tica de Espesores")
        clasificacion_layout = QVBoxLayout()
        
        clasificacion_info = QLabel("""Durante el proceso de "Generar Datos Reporte" se ejecutan autom√°ticamente:

üìÖ Normalizaci√≥n de fechas: Detecta y convierte formatos autom√°ticamente
üìè Clasificaci√≥n de espesores seg√∫n rangos:
‚Ä¢ Mayor a 1.3 = "Triple Capa"
‚Ä¢ Mayor a 0.8 = "Doble Capa" 
‚Ä¢ Mayor a 0.2 = "Relleno"
‚Ä¢ Entre -0.2 a 0.2 = "Corte Relleno"
‚Ä¢ Menor a -0.2 = "Corte"

La columna 'Comentarios Espesor' se crea/actualiza autom√°ticamente en 'Tabla Base Datos'.""")
        clasificacion_info.setStyleSheet("font-family: 'Courier New'; color: #555; background-color: #f9f9f9; padding: 10px; border: 1px solid #ddd; border-radius: 3px;")
        clasificacion_layout.addWidget(clasificacion_info)
        
        clasificacion_group.setLayout(clasificacion_layout)
        layout.addWidget(clasificacion_group)
        
        layout.addStretch()
        
        # Bot√≥n ejecutar - CAMBIADO
        self.btn_reports = QPushButton("ÔøΩ Generar Datos Reporte")
        self.btn_reports.setStyleSheet("""
            QPushButton {
                background-color: #2E4057; 
                color: white; 
                font-weight: bold; 
                padding: 12px; 
                border: none; 
                border-radius: 5px;
                font-size: 13px;
            }
            QPushButton:hover {
                background-color: #3D5A75;
            }
            QPushButton:pressed {
                background-color: #1E2B3A;
            }
        """)
        self.btn_reports.clicked.connect(self.ejecutar_fusion_y_analisis)
        layout.addWidget(self.btn_reports)
        
        tab.setLayout(layout)
        self.tab_widget.addTab(tab, "4. Datos Reporte")

    def ejecutar_fusion_datos(self):
        """Ejecutar proceso de fusi√≥n de datos para reportes"""
        # Mostrar progreso
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)
        
        self.log_message("ÔøΩ Iniciando fusi√≥n de datos para reportes...")
        
        try:
            # Importar el procesador
            from .core.data_merge import DataMergeProcessor
            
            # Crear procesador
            processor = DataMergeProcessor(
                progress_callback=self.update_progress,
                log_callback=self.log_message
            )
            
            # Ejecutar fusi√≥n de datos
            resultado = processor.fusionar_datos_historicos()
            
            if resultado['success']:
                self.log_message("üéâ ¬°Fusi√≥n de datos completada exitosamente!")
                self.log_message(f"üìä Registros copiados: {resultado.get('registros_copiados', 0)}")
                self.log_message(f"üìä Nuevos registros: {resultado.get('nuevos_ids', 0)}")
                self.log_message(f"ÔøΩ Total de registros en DATOS HISTORICOS: {resultado.get('total_registros', 0)}")
                self.log_message(f"‚ÑπÔ∏è Ahora puede usar la tabla 'DATOS HISTORICOS' para crear reportes manualmente en el compositor de QGIS")
                self.save_settings()
            else:
                self.log_message(f"‚ùå Error: {resultado['message']}")
                if 'details' in resultado:
                    self.log_message("üìã Ver detalles del error arriba")
                
        except ImportError as e:
            self.log_message(f"‚ùå Error de importaci√≥n: {e}")
            self.log_message("‚ÑπÔ∏è Aseg√∫rese de que el archivo data_merge.py exista en la carpeta core/")
        except Exception as e:
            self.log_message(f"‚ùå Error inesperado: {e}")
        finally:
            self.progress_bar.setVisible(False)
    
    def ejecutar_fusion_y_analisis(self):
        """Ejecutar proceso de fusi√≥n de datos, an√°lisis hist√≥rico y generaci√≥n de gr√°ficos"""
        # Mostrar progreso
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)
        
        # Paso 1: Fusionar datos
        self.log_message("üîÑ Iniciando proceso completo (fusi√≥n + an√°lisis + gr√°ficos)...")
        
        try:
            # Importar el procesador
            from .core.data_merge import DataMergeProcessor
            
            # Crear procesador
            processor = DataMergeProcessor(
                progress_callback=self.update_progress,
                log_callback=self.log_message
            )
            
            # Ejecutar fusi√≥n de datos
            self.log_message("üìã Paso 1: Fusi√≥n de datos hist√≥ricos...")
            resultado = processor.fusionar_datos_historicos()
            
            if resultado['success']:
                self.log_message("‚úÖ Fusi√≥n de datos completada")
                self.log_message(f"üìä Registros copiados: {resultado.get('registros_copiados', 0)}")
                self.log_message(f"üìä Nuevos registros: {resultado.get('nuevos_ids', 0)}")
                self.log_message(f"üìã Total de registros en DATOS HISTORICOS: {resultado.get('total_registros', 0)}")
                
                # Paso 2: An√°lisis hist√≥rico
                self.log_message("üìà Paso 2: Iniciando an√°lisis hist√≥rico...")
                self.log_message(f"‚öôÔ∏è Periodo crecimiento anual: {self.dias_crecimiento.value()} d√≠as")
                
                try:
                    # Importar el procesador
                    from .core.historical_analysis import HistoricalAnalysisProcessor
                    
                    # Crear procesador
                    processor_hist = HistoricalAnalysisProcessor(
                        progress_callback=self.update_progress,
                        log_callback=self.log_message
                    )
                    
                    # Ejecutar an√°lisis hist√≥rico
                    resultado_hist = processor_hist.ejecutar_analisis_historico_completo(
                        dias_crecimiento_anual=self.dias_crecimiento.value()
                    )
                    
                    if resultado_hist['success']:
                        self.log_message("‚úÖ An√°lisis hist√≥rico completado")
                        
                        # Mostrar resumen de intervenciones
                        resultado_interv = resultado_hist.get('resultado_intervencion', {})
                        self.log_message(f"üìÖ An√°lisis de intervenciones:")
                        self.log_message(f"  ‚Ä¢ Registros con intervenci√≥n: {resultado_interv.get('registros_actualizados', 0)}")
                        self.log_message(f"  ‚Ä¢ Registros sin intervenci√≥n previa: {resultado_interv.get('registros_sin_intervencion', 0)}")
                        
                        # Mostrar resumen de crecimiento
                        resultado_crec = resultado_hist.get('resultado_crecimiento', {})
                        self.log_message(f"üìè An√°lisis de crecimiento anual:")
                        self.log_message(f"  ‚Ä¢ Registros con crecimiento calculado: {resultado_crec.get('registros_actualizados', 0)}")
                        self.log_message(f"  ‚Ä¢ Registros sin datos suficientes: {resultado_crec.get('registros_sin_datos', 0)}")
                        
                        self.log_message(f"üîÑ Total de registros analizados: {resultado_hist.get('registros_totales', 0)}")
                        
                        # Paso 3: Generar gr√°ficos de barras
                        self.log_message("üìä Paso 3: Generando gr√°ficos de barras por sector...")
                        
                        try:
                            # Importar el generador de gr√°ficos (usando la versi√≥n simple)
                            from .core.bar_charts_simple import SimpleBarChartGenerator
                            
                            # Obtener la ruta de procesamiento
                            proc_root = self.proc_root.text().strip()
                            if not proc_root:
                                self.log_message("‚ö†Ô∏è No se ha configurado la carpeta PROC_ROOT. No se generar√°n gr√°ficos.")
                            else:
                                # Crear generador de gr√°ficos
                                chart_generator = SimpleBarChartGenerator(
                                    proc_root=proc_root,
                                    progress_callback=self.update_progress,
                                    log_callback=self.log_message
                                )
                                
                                # Ejecutar generaci√≥n de gr√°ficos
                                resultado_charts = chart_generator.generar_graficos_barras()
                                
                                if resultado_charts['success']:
                                    self.log_message("‚úÖ Generaci√≥n de gr√°ficos completada")
                                    self.log_message(f"üìä Gr√°ficos generados: {resultado_charts.get('graficos_generados', 0)}")
                                    if resultado_charts.get('graficos_fallidos', 0) > 0:
                                        self.log_message(f"‚ö†Ô∏è Gr√°ficos fallidos: {resultado_charts.get('graficos_fallidos', 0)}")
                                    self.log_message(f"üìÅ Carpeta de gr√°ficos: {resultado_charts.get('carpeta_salida', '')}")
                                else:
                                    self.log_message(f"‚ùå Error en generaci√≥n de gr√°ficos: {resultado_charts['message']}")
                                    if 'details' in resultado_charts:
                                        self.log_message("üìã Ver detalles del error arriba")
                        
                        except ImportError as e:
                            self.log_message(f"‚ùå Error de importaci√≥n: {e}")
                            self.log_message("‚ÑπÔ∏è Aseg√∫rese de que el archivo bar_charts_simple.py exista en la carpeta core/")
                        except Exception as e:
                            import traceback
                            self.log_message(f"‚ùå Error inesperado en generaci√≥n de gr√°ficos: {e}")
                            self.log_message(traceback.format_exc())
                        
                        # Paso 4: Generar gr√°ficos de series temporales
                        self.log_message("üìà Paso 4: Generando gr√°ficos de series temporales...")
                        
                        try:
                            # Importar el generador de series temporales
                            from .core.time_series_charts import TimeSeriesChartGenerator
                            
                            # Obtener la ruta de procesamiento
                            proc_root = self.proc_root.text().strip()
                            if not proc_root:
                                self.log_message("‚ö†Ô∏è No se ha configurado la carpeta PROC_ROOT. No se generar√°n series temporales.")
                            else:
                                # Crear generador de series temporales
                                series_generator = TimeSeriesChartGenerator(
                                    proc_root=proc_root,
                                    progress_callback=self.update_progress,
                                    log_callback=self.log_message
                                )
                                
                                # Ejecutar generaci√≥n de series temporales
                                resultado_series = series_generator.generar_graficos_series_temporales()
                                
                                if resultado_series['success']:
                                    self.log_message("‚úÖ Generaci√≥n de series temporales completada")
                                    self.log_message(f"üìà Series temporales generadas: {resultado_series.get('graficos_generados', 0)}")
                                    if resultado_series.get('graficos_fallidos', 0) > 0:
                                        self.log_message(f"‚ö†Ô∏è Series temporales fallidas: {resultado_series.get('graficos_fallidos', 0)}")
                                    self.log_message(f"üìÅ Carpeta de series temporales: {resultado_series.get('carpeta_salida', '')}")
                                else:
                                    self.log_message(f"‚ùå Error en generaci√≥n de series temporales: {resultado_series['message']}")
                                    if 'details' in resultado_series:
                                        self.log_message("üìã Ver detalles del error arriba")
                        
                        except ImportError as e:
                            self.log_message(f"‚ùå Error de importaci√≥n: {e}")
                            self.log_message("‚ÑπÔ∏è Aseg√∫rese de que el archivo time_series_charts.py exista en la carpeta core/")
                        except Exception as e:
                            import traceback
                            self.log_message(f"‚ùå Error inesperado en generaci√≥n de series temporales: {e}")
                            self.log_message(traceback.format_exc())
                        
                        # Paso 5: Generar pantallazos heatmap
                        self.log_message("üì∑ Paso 5: Generando pantallazos heatmap...")
                        
                        try:
                            # Importar el generador de pantallazos heatmap
                            from .core.heatmap_screenshots import HeatmapScreenshotGenerator
                            
                            # Obtener la ruta de procesamiento
                            proc_root = self.proc_root.text().strip()
                            if not proc_root:
                                self.log_message("‚ö†Ô∏è No se ha configurado la carpeta PROC_ROOT. No se generar√°n pantallazos heatmap.")
                            else:
                                # Crear generador de pantallazos heatmap
                                heatmap_generator = HeatmapScreenshotGenerator(
                                    proc_root=proc_root,
                                    progress_callback=self.update_progress,
                                    log_callback=self.log_message
                                )
                                
                                # Ejecutar generaci√≥n de pantallazos heatmap
                                resultado_heatmap = heatmap_generator.generar_pantallazos_heatmap()
                                
                                if resultado_heatmap['success']:
                                    self.log_message("‚úÖ Generaci√≥n de pantallazos heatmap completada")
                                    self.log_message(f"üì∑ Pantallazos heatmap generados: {resultado_heatmap.get('graficos_generados', 0)}")
                                    if resultado_heatmap.get('graficos_fallidos', 0) > 0:
                                        self.log_message(f"‚ö†Ô∏è Pantallazos heatmap fallidos: {resultado_heatmap.get('graficos_fallidos', 0)}")
                                    self.log_message(f"üìÅ Carpeta de pantallazos heatmap: {resultado_heatmap.get('carpeta_salida', '')}")
                                else:
                                    self.log_message(f"‚ùå Error en generaci√≥n de pantallazos heatmap: {resultado_heatmap['message']}")
                                    if 'details' in resultado_heatmap:
                                        self.log_message("üìã Ver detalles del error arriba")
                        
                        except ImportError as e:
                            self.log_message(f"‚ùå Error de importaci√≥n: {e}")
                            self.log_message("‚ÑπÔ∏è Aseg√∫rese de que el archivo heatmap_screenshots.py exista en la carpeta core/")
                        except Exception as e:
                            import traceback
                            self.log_message(f"‚ùå Error inesperado en generaci√≥n de pantallazos heatmap: {e}")
                            self.log_message(traceback.format_exc())
                        
                        # Paso 6: Clasificar espesores autom√°ticamente
                        self.log_message("üìè Paso 6: Clasificando espesores autom√°ticamente...")
                        
                        try:
                            # Importar el procesador de clasificaci√≥n
                            from .core.espesor_classification import EspesorClassificationProcessor
                            
                            # Crear procesador
                            processor_espesor = EspesorClassificationProcessor(
                                progress_callback=self.update_progress,
                                log_callback=self.log_message
                            )
                            
                            # Ejecutar clasificaci√≥n
                            resultado_espesor = processor_espesor.ejecutar_clasificacion_espesor()
                            
                            if resultado_espesor['success']:
                                self.log_message("‚úÖ Clasificaci√≥n de espesores completada")
                                self.log_message(f"üìä Registros procesados: {resultado_espesor.get('registros_procesados', 0)}")
                                self.log_message(f"üìã Columna 'Comentarios Espesor' actualizada")
                            else:
                                self.log_message(f"‚ùå Error en clasificaci√≥n de espesores: {resultado_espesor['message']}")
                                if 'details' in resultado_espesor:
                                    self.log_message("üìã Ver detalles del error arriba")
                        
                        except ImportError as e:
                            self.log_message(f"‚ùå Error de importaci√≥n: {e}")
                            self.log_message("‚ÑπÔ∏è Aseg√∫rese de que el archivo espesor_classification.py exista en la carpeta core/")
                        except Exception as e:
                            import traceback
                            self.log_message(f"‚ùå Error inesperado en clasificaci√≥n de espesores: {e}")
                            self.log_message(traceback.format_exc())
                        
                        # Mensaje final
                        self.log_message("üéâ PROCESO COMPLETO FINALIZADO CON √âXITO")
                        self.save_settings()
                    else:
                        self.log_message(f"‚ùå Error en an√°lisis hist√≥rico: {resultado_hist['message']}")
                        if 'details' in resultado_hist:
                            self.log_message("üìã Ver detalles del error arriba")
                        
                except ImportError as e:
                    self.log_message(f"‚ùå Error de importaci√≥n: {e}")
                    self.log_message("‚ÑπÔ∏è Aseg√∫rese de que el archivo historical_analysis.py exista en la carpeta core/")
                except Exception as e:
                    self.log_message(f"‚ùå Error inesperado en an√°lisis hist√≥rico: {e}")
            else:
                self.log_message(f"‚ùå Error en fusi√≥n: {resultado['message']}")
                if 'details' in resultado:
                    self.log_message("üìã Ver detalles del error arriba")
                
        except ImportError as e:
            self.log_message(f"‚ùå Error de importaci√≥n: {e}")
            self.log_message("‚ÑπÔ∏è Aseg√∫rese de que el archivo data_merge.py exista en la carpeta core/")
        except Exception as e:
            self.log_message(f"‚ùå Error inesperado en fusi√≥n: {e}")
        finally:
            self.progress_bar.setVisible(False)
            
    def ejecutar_reportes(self):
        """M√âTODO LEGACY - Ya no se utiliza pero se mantiene por compatibilidad"""
        self.log_message("‚ö†Ô∏è Esta funcionalidad ha sido reemplazada por 'Generar Datos Reporte'")
        self.log_message("‚ÑπÔ∏è Los reportes ahora se crean manualmente en el compositor de impresiones de QGIS")
        self.log_message("‚ÑπÔ∏è Use la tabla 'DATOS HISTORICOS' como fuente de datos para sus reportes")
        
    def create_historical_tab(self):
        """Pesta√±a 5: An√°lisis Hist√≥rico"""
        tab = QtWidgets.QWidget()
        layout = QVBoxLayout()
        
        # Header principal
        header_layout = QHBoxLayout()
        icon_label = QLabel("üìà")
        icon_label.setStyleSheet("font-size: 24px; margin-right: 10px;")
        title_label = QLabel("AN√ÅLISIS HIST√ìRICO")
        title_label.setStyleSheet("font-weight: bold; font-size: 16px; color: #5F4B8B;")
        header_layout.addWidget(icon_label)
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        layout.addLayout(header_layout)
        
        desc = QLabel("Realiza an√°lisis de datos hist√≥ricos para calcular fechas de intervenci√≥n y crecimiento anual")
        desc.setStyleSheet("color: gray; margin-bottom: 15px; font-size: 12px;")
        layout.addWidget(desc)
        
        # Configuraci√≥n del an√°lisis hist√≥rico
        config_group = QtWidgets.QGroupBox("‚öôÔ∏è Configuraci√≥n de An√°lisis")
        config_layout = QVBoxLayout()
        
        # Periodo para crecimiento anual
        period_layout = QHBoxLayout()
        period_layout.addWidget(QLabel("Periodo para crecimiento anual:"))
        self.dias_crecimiento = QtWidgets.QSpinBox()
        self.dias_crecimiento.setMinimum(30)
        self.dias_crecimiento.setMaximum(730)  # 2 a√±os
        self.dias_crecimiento.setValue(365)    # 1 a√±o por defecto
        self.dias_crecimiento.setSuffix(" d√≠as")
        period_layout.addWidget(self.dias_crecimiento)
        period_layout.addStretch()
        config_layout.addLayout(period_layout)
        
        config_group.setLayout(config_layout)
        layout.addWidget(config_group)
        
        # Columnas generadas
        columnas_group = QtWidgets.QGroupBox("üìä Columnas que se Generar√°n")
        columnas_layout = QVBoxLayout()
        
        columnas_info = QLabel("""1Ô∏è‚É£ "Ultima Intervencion": Fecha de la √∫ltima intervenci√≥n en el mismo Muro y Sector
    ‚Ä¢ Input: Muro, Sector y Fecha de cada registro
    ‚Ä¢ Busca en DATOS HISTORICOS intervenciones anteriores
    ‚Ä¢ Formato: YYYY-MM-DD (ej: 2025-05-15)

2Ô∏è‚É£ "Ultimo Crecimiento Anual": Suma de espesores en el periodo configurado
    ‚Ä¢ Input: Muro, Sector y Fecha de cada registro
    ‚Ä¢ Calcula suma de espesores en el periodo definido
    ‚Ä¢ Formato: N√∫mero decimal (ej: 24.464)""")
        columnas_info.setStyleSheet("font-family: 'Courier New'; color: #555; background-color: #f8f8f8; padding: 10px; border: 1px solid #5F4B8B; border-radius: 3px;")
        columnas_layout.addWidget(columnas_info)
        
        columnas_group.setLayout(columnas_layout)
        layout.addWidget(columnas_group)
        
        # Proceso detallado
        proceso_group = QtWidgets.QGroupBox("üîÑ Proceso de An√°lisis")
        proceso_layout = QVBoxLayout()
        
        proceso_info = QLabel("""El proceso de an√°lisis realiza dos c√°lculos principales:

1. √öLTIMA INTERVENCI√ìN:
   ‚Ä¢ Para cada registro de "Tabla Base Datos"
   ‚Ä¢ Busca en "DATOS HISTORICOS" registros con el mismo Muro y Sector
   ‚Ä¢ Identifica la fecha m√°s reciente anterior a la fecha del registro
   ‚Ä¢ Guarda esta fecha como "Ultima Intervencion"

2. CRECIMIENTO ANUAL:
   ‚Ä¢ Para cada registro de "Tabla Base Datos"
   ‚Ä¢ Busca en "DATOS HISTORICOS" registros con el mismo Muro y Sector
   ‚Ä¢ Dentro del periodo configurado (365 d√≠as por defecto)
   ‚Ä¢ Suma todos los espesores encontrados
   ‚Ä¢ Guarda este valor como "Ultimo Crecimiento Anual"
""")
        proceso_info.setStyleSheet("font-family: 'Courier New'; color: #555; background-color: #f0f0ff; padding: 10px; border: 1px solid #5F4B8B; border-radius: 3px;")
        proceso_layout.addWidget(proceso_info)
        
        proceso_group.setLayout(proceso_layout)
        layout.addWidget(proceso_group)
        
        layout.addStretch()
        
        # Bot√≥n ejecutar
        self.btn_historical = QPushButton("üìà Ejecutar An√°lisis Hist√≥rico")
        self.btn_historical.setStyleSheet("""
            QPushButton {
                background-color: #5F4B8B; 
                color: white; 
                font-weight: bold; 
                padding: 12px; 
                border: none; 
                border-radius: 5px;
                font-size: 13px;
            }
            QPushButton:hover {
                background-color: #483A6A;
            }
            QPushButton:pressed {
                background-color: #372A54;
            }
        """)
        self.btn_historical.clicked.connect(self.ejecutar_analisis_historico)
        layout.addWidget(self.btn_historical)
        
        tab.setLayout(layout)
        self.tab_widget.addTab(tab, "5. An√°lisis Hist√≥rico")
        
    def ejecutar_analisis_historico(self):
        """Ejecutar proceso de an√°lisis hist√≥rico"""
        # Mostrar progreso
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)
        
        self.log_message("üìà Iniciando an√°lisis hist√≥rico...")
        self.log_message(f"‚öôÔ∏è Periodo crecimiento anual: {self.dias_crecimiento.value()} d√≠as")
        
        try:
            # Importar el procesador
            from .core.historical_analysis import HistoricalAnalysisProcessor
            
            # Crear procesador
            processor = HistoricalAnalysisProcessor(
                progress_callback=self.update_progress,
                log_callback=self.log_message
            )
            
            # Ejecutar an√°lisis hist√≥rico
            resultado = processor.ejecutar_analisis_historico_completo(
                dias_crecimiento_anual=self.dias_crecimiento.value()
            )
            
            if resultado['success']:
                self.log_message("üéâ ¬°An√°lisis hist√≥rico completado exitosamente!")
                
                # Mostrar resumen de intervenciones
                resultado_interv = resultado.get('resultado_intervencion', {})
                self.log_message(f"üìÖ An√°lisis de intervenciones:")
                self.log_message(f"  ‚Ä¢ Registros con intervenci√≥n: {resultado_interv.get('registros_actualizados', 0)}")
                self.log_message(f"  ‚Ä¢ Registros sin intervenci√≥n previa: {resultado_interv.get('registros_sin_intervencion', 0)}")
                
                # Mostrar resumen de crecimiento
                resultado_crec = resultado.get('resultado_crecimiento', {})
                self.log_message(f"üìè An√°lisis de crecimiento anual:")
                self.log_message(f"  ‚Ä¢ Registros con crecimiento calculado: {resultado_crec.get('registros_actualizados', 0)}")
                self.log_message(f"  ‚Ä¢ Registros sin datos suficientes: {resultado_crec.get('registros_sin_datos', 0)}")
                
                self.log_message(f"üîÑ Total de registros procesados: {resultado.get('registros_totales', 0)}")
                self.save_settings()
            else:
                self.log_message(f"‚ùå Error: {resultado['message']}")
                if 'details' in resultado:
                    self.log_message("üìã Ver detalles del error arriba")
                
        except ImportError as e:
            self.log_message(f"‚ùå Error de importaci√≥n: {e}")
            self.log_message("‚ÑπÔ∏è Aseg√∫rese de que el archivo historical_analysis.py exista en la carpeta core/")
        except Exception as e:
            self.log_message(f"‚ùå Error inesperado: {e}")
        finally:
            self.progress_bar.setVisible(False)